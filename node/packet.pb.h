// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
void AddDescriptors_packet_2eproto();
namespace lorasensornetwork {
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
}  // namespace lorasensornetwork
PROTOBUF_NAMESPACE_OPEN
template<> ::lorasensornetwork::Packet* Arena::CreateMaybeMessage<::lorasensornetwork::Packet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lorasensornetwork {

enum Packet_MessageType {
  Packet_MessageType_JOIN_REQUEST = 0,
  Packet_MessageType_JOIN_ACK = 1,
  Packet_MessageType_SENSOR_RESPONSE = 2,
  Packet_MessageType_SENSOR_REQUEST = 3,
  Packet_MessageType_Packet_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Packet_MessageType_Packet_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Packet_MessageType_IsValid(int value);
constexpr Packet_MessageType Packet_MessageType_MessageType_MIN = Packet_MessageType_JOIN_REQUEST;
constexpr Packet_MessageType Packet_MessageType_MessageType_MAX = Packet_MessageType_SENSOR_REQUEST;
constexpr int Packet_MessageType_MessageType_ARRAYSIZE = Packet_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Packet_MessageType_descriptor();
inline const std::string& Packet_MessageType_Name(Packet_MessageType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Packet_MessageType_descriptor(), value);
}
inline bool Packet_MessageType_Parse(
    const std::string& name, Packet_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Packet_MessageType>(
    Packet_MessageType_descriptor(), name, value);
}
// ===================================================================

class Packet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lorasensornetwork.Packet) */ {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Packet* other);
  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(nullptr);
  }

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lorasensornetwork.Packet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Packet_MessageType MessageType;
  static constexpr MessageType JOIN_REQUEST =
    Packet_MessageType_JOIN_REQUEST;
  static constexpr MessageType JOIN_ACK =
    Packet_MessageType_JOIN_ACK;
  static constexpr MessageType SENSOR_RESPONSE =
    Packet_MessageType_SENSOR_RESPONSE;
  static constexpr MessageType SENSOR_REQUEST =
    Packet_MessageType_SENSOR_REQUEST;
  static inline bool MessageType_IsValid(int value) {
    return Packet_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    Packet_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    Packet_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    Packet_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return Packet_MessageType_descriptor();
  }
  static inline const std::string& MessageType_Name(MessageType value) {
    return Packet_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const std::string& name,
      MessageType* value) {
    return Packet_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes src_id = 1;
  void clear_src_id();
  static const int kSrcIdFieldNumber = 1;
  const std::string& src_id() const;
  void set_src_id(const std::string& value);
  void set_src_id(std::string&& value);
  void set_src_id(const char* value);
  void set_src_id(const void* value, size_t size);
  std::string* mutable_src_id();
  std::string* release_src_id();
  void set_allocated_src_id(std::string* src_id);

  // bytes dest_id = 2;
  void clear_dest_id();
  static const int kDestIdFieldNumber = 2;
  const std::string& dest_id() const;
  void set_dest_id(const std::string& value);
  void set_dest_id(std::string&& value);
  void set_dest_id(const char* value);
  void set_dest_id(const void* value, size_t size);
  std::string* mutable_dest_id();
  std::string* release_dest_id();
  void set_allocated_dest_id(std::string* dest_id);

  // bytes payload = 4;
  void clear_payload();
  static const int kPayloadFieldNumber = 4;
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);

  // .lorasensornetwork.Packet.MessageType msg_type = 3;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 3;
  ::lorasensornetwork::Packet_MessageType msg_type() const;
  void set_msg_type(::lorasensornetwork::Packet_MessageType value);

  // @@protoc_insertion_point(class_scope:lorasensornetwork.Packet)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dest_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  int msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Packet

// bytes src_id = 1;
inline void Packet::clear_src_id() {
  src_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Packet::src_id() const {
  // @@protoc_insertion_point(field_get:lorasensornetwork.Packet.src_id)
  return src_id_.GetNoArena();
}
inline void Packet::set_src_id(const std::string& value) {
  
  src_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lorasensornetwork.Packet.src_id)
}
inline void Packet::set_src_id(std::string&& value) {
  
  src_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lorasensornetwork.Packet.src_id)
}
inline void Packet::set_src_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  src_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lorasensornetwork.Packet.src_id)
}
inline void Packet::set_src_id(const void* value, size_t size) {
  
  src_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lorasensornetwork.Packet.src_id)
}
inline std::string* Packet::mutable_src_id() {
  
  // @@protoc_insertion_point(field_mutable:lorasensornetwork.Packet.src_id)
  return src_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Packet::release_src_id() {
  // @@protoc_insertion_point(field_release:lorasensornetwork.Packet.src_id)
  
  return src_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Packet::set_allocated_src_id(std::string* src_id) {
  if (src_id != nullptr) {
    
  } else {
    
  }
  src_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_id);
  // @@protoc_insertion_point(field_set_allocated:lorasensornetwork.Packet.src_id)
}

// bytes dest_id = 2;
inline void Packet::clear_dest_id() {
  dest_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Packet::dest_id() const {
  // @@protoc_insertion_point(field_get:lorasensornetwork.Packet.dest_id)
  return dest_id_.GetNoArena();
}
inline void Packet::set_dest_id(const std::string& value) {
  
  dest_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lorasensornetwork.Packet.dest_id)
}
inline void Packet::set_dest_id(std::string&& value) {
  
  dest_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lorasensornetwork.Packet.dest_id)
}
inline void Packet::set_dest_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dest_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lorasensornetwork.Packet.dest_id)
}
inline void Packet::set_dest_id(const void* value, size_t size) {
  
  dest_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lorasensornetwork.Packet.dest_id)
}
inline std::string* Packet::mutable_dest_id() {
  
  // @@protoc_insertion_point(field_mutable:lorasensornetwork.Packet.dest_id)
  return dest_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Packet::release_dest_id() {
  // @@protoc_insertion_point(field_release:lorasensornetwork.Packet.dest_id)
  
  return dest_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Packet::set_allocated_dest_id(std::string* dest_id) {
  if (dest_id != nullptr) {
    
  } else {
    
  }
  dest_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dest_id);
  // @@protoc_insertion_point(field_set_allocated:lorasensornetwork.Packet.dest_id)
}

// .lorasensornetwork.Packet.MessageType msg_type = 3;
inline void Packet::clear_msg_type() {
  msg_type_ = 0;
}
inline ::lorasensornetwork::Packet_MessageType Packet::msg_type() const {
  // @@protoc_insertion_point(field_get:lorasensornetwork.Packet.msg_type)
  return static_cast< ::lorasensornetwork::Packet_MessageType >(msg_type_);
}
inline void Packet::set_msg_type(::lorasensornetwork::Packet_MessageType value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:lorasensornetwork.Packet.msg_type)
}

// bytes payload = 4;
inline void Packet::clear_payload() {
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Packet::payload() const {
  // @@protoc_insertion_point(field_get:lorasensornetwork.Packet.payload)
  return payload_.GetNoArena();
}
inline void Packet::set_payload(const std::string& value) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lorasensornetwork.Packet.payload)
}
inline void Packet::set_payload(std::string&& value) {
  
  payload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lorasensornetwork.Packet.payload)
}
inline void Packet::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lorasensornetwork.Packet.payload)
}
inline void Packet::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lorasensornetwork.Packet.payload)
}
inline std::string* Packet::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:lorasensornetwork.Packet.payload)
  return payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Packet::release_payload() {
  // @@protoc_insertion_point(field_release:lorasensornetwork.Packet.payload)
  
  return payload_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Packet::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:lorasensornetwork.Packet.payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace lorasensornetwork

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lorasensornetwork::Packet_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lorasensornetwork::Packet_MessageType>() {
  return ::lorasensornetwork::Packet_MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packet_2eproto
